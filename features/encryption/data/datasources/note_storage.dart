import 'dart:convert';
import 'dart:math';
import 'package:crypto/crypto.dart';
import 'package:encrypt/encrypt.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import '../../domain/entities/note.dart';
import '../../domain/entities/note_image.dart';
import '../../../../shared/services/image_service.dart';

/// Storage –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —Å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
class NoteStorage {
  static const String _notesDir = 'notes';
  static const String _magicSignature = '[MAGIC]::';
  final ImageService _imageService = ImageService();
  
  /// –ü–æ–ª—É—á–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
  Future<Directory> _getNotesDirectory() async {
    final appDir = await getApplicationDocumentsDirectory();
    final notesDir = Directory('${appDir.path}/$_notesDir');
    
    if (!await notesDir.exists()) {
      await notesDir.create(recursive: true);
    }
    
    return notesDir;
  }
  
  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
  Future<(Note, String)> createNote(Map<String, dynamic> content, String masterKey, {List<NoteImage> images = const []}) async {
    print('NoteStorage: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É...');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
    final noteKey = _generateNoteKey();
    print('NoteStorage: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á –∑–∞–º–µ—Ç–∫–∏');
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON Delta –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    final contentString = jsonEncode(content);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    final contentWithSignature = '$_magicSignature$contentString';
    print('NoteStorage: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É');
    
    // –®–∏—Ñ—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª—é—á–æ–º –∑–∞–º–µ—Ç–∫–∏
    final encryptedContent = _encryptContent(contentWithSignature, noteKey);
    print('NoteStorage: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ');
    
    // –®–∏—Ñ—Ä—É–µ–º –∫–ª—é—á –∑–∞–º–µ—Ç–∫–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º
    final encryptedNoteKey = _encryptNoteKey(noteKey, masterKey);
    print('NoteStorage: –ö–ª—é—á –∑–∞–º–µ—Ç–∫–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    List<NoteImage> processedImages = [];
    Map<String, dynamic> updatedContent = content;
    
    if (images.isNotEmpty) {
      print('NoteStorage: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
      for (final image in images) {
        final tempFile = File(image.imagePath);
        if (await tempFile.exists()) {
          // –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –∑–∞–º–µ—Ç–∫–∏
          final newEncryptedPath = await _imageService.encryptImage(tempFile, noteKey);
          if (newEncryptedPath != null) {
            processedImages.add(image.copyWith(
              imagePath: newEncryptedPath,
              isEncrypted: true, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ
            ));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ JSON Delta
            // TODO: –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≤ Quill Delta
            // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ø–æ–∑–∂–µ –æ–±–Ω–æ–≤–∏–º –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Quill
            
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await tempFile.delete();
            print('NoteStorage: üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${tempFile.path}');
          }
        }
      }
      print('NoteStorage: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–º–µ—Ç–∫—É
    final note = Note(
      id: _generateId(),
      content: updatedContent,
      createdAt: DateTime.now(),
      encryptedContent: encryptedContent,
      images: processedImages,
    );
    
    print('NoteStorage: –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${note.id}');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É
    await _saveNote(note);
    print('NoteStorage: –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª');
    
    return (note, encryptedNoteKey);
  }
  
  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
  Future<List<Note>> getAllNotes() async {
    final notesDir = await _getNotesDirectory();
    final files = notesDir.listSync().whereType<File>();
    final notes = <Note>[];
    
    for (final file in files) {
      try {
        final noteJson = await file.readAsString();
        final noteMap = jsonDecode(noteJson);
        
        // –ü–∞—Ä—Å–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        List<NoteImage> images = [];
        if (noteMap['images'] != null) {
          final imagesList = noteMap['images'] as List;
          images = imagesList.map((imgMap) => NoteImage.fromJson(imgMap)).toList();
        }
        
        notes.add(Note(
          id: noteMap['id'],
          content: {}, // –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ
          createdAt: DateTime.parse(noteMap['createdAt']),
          modifiedAt: noteMap['modifiedAt'] != null 
            ? DateTime.parse(noteMap['modifiedAt']) 
            : null,
          encryptedContent: noteMap['encryptedContent'],
          images: images,
        ));
      } catch (e) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        continue;
      }
    }
    
    return notes;
  }
  
  /// –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É
  Future<(Note?, String?)> findNoteByEncryptedKey(String encryptedNoteKey, String masterKey) async {
    print('NoteStorage: –ò—â–µ–º –∑–∞–º–µ—Ç–∫—É –ø–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É...');
    
    // –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∫–ª—é—á –∏–∑ QR –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º
    print('NoteStorage: –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∫–ª—é—á –∏–∑ QR...');
    final decryptedNoteKey = _decryptNoteKey(encryptedNoteKey, masterKey);
    if (decryptedNoteKey == null) {
      print('NoteStorage: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∏–∑ QR');
      return (null, null);
    }
    print('NoteStorage: –ö–ª—é—á –∏–∑ QR —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω');
    
    final notes = await getAllNotes();
    print('NoteStorage: –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫: ${notes.length}');
    
    for (final note in notes) {
      try {
        print('NoteStorage: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–º–µ—Ç–∫—É ${note.id}...');
        
        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –∫–ª—é—á–æ–º –∏–∑ QR
        final decryptedContent = _decryptContent(note.encryptedContent, decryptedNoteKey);
        if (decryptedContent == null) {
          print('NoteStorage: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏');
          continue;
        }
        
        print('NoteStorage: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
        if (decryptedContent.startsWith(_magicSignature)) {
          print('NoteStorage: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞! –ó–∞–º–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞!');
          final contentString = decryptedContent.substring(_magicSignature.length);
          final content = jsonDecode(contentString) as Map<String, dynamic>;
          return (note.copyWith(content: content), decryptedNoteKey);
        } else {
          print('NoteStorage: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } catch (e) {
        print('NoteStorage: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–º–µ—Ç–∫–∏: $e');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        continue;
      }
    }
    
    print('NoteStorage: –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return (null, null);
  }
  
  /// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  Future<(Note, String)> updateNote(Note note, String masterKey, {String? existingNoteKey}) async {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
    final noteKey = existingNoteKey ?? _generateNoteKey();
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON Delta –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    final contentString = jsonEncode(note.content);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
    final contentWithSignature = '$_magicSignature$contentString';
    
    // –®–∏—Ñ—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    final encryptedContent = _encryptContent(contentWithSignature, noteKey);
    
    // –®–∏—Ñ—Ä—É–µ–º –∫–ª—é—á –∑–∞–º–µ—Ç–∫–∏
    final encryptedNoteKey = _encryptNoteKey(noteKey, masterKey);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    List<NoteImage> processedImages = [];
    Map<String, dynamic> updatedContent = note.content;
    
    // –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
    List<String> oldImagePaths = [];
    
    if (note.images.isNotEmpty) {
      for (final image in note.images) {
        final imageFile = File(image.imagePath);
        if (await imageFile.exists()) {
          String? newEncryptedPath;
          
          if (image.isEncrypted) {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ - –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
            print('NoteStorage: –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image.id}');
            
            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–ª—é—á–æ–º
            final decryptedBytes = await _imageService.decryptImage(image.imagePath, existingNoteKey ?? noteKey);
            if (decryptedBytes != null) {
              // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
              final tempDir = await getTemporaryDirectory();
              final tempFile = File('${tempDir.path}/temp_${image.id}.jpg');
              await tempFile.writeAsBytes(decryptedBytes);
              
              // –ü–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
              newEncryptedPath = await _imageService.encryptImage(tempFile, noteKey);
              
              // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
              await tempFile.delete();
            } else {
              print('NoteStorage: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image.id}');
            }
          } else {
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ - —à–∏—Ñ—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            print('NoteStorage: –®–∏—Ñ—Ä—É–µ–º –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image.id}');
            newEncryptedPath = await _imageService.encryptImage(imageFile, noteKey);
          }
          
          if (newEncryptedPath != null) {
            processedImages.add(image.copyWith(
              imagePath: newEncryptedPath,
              isEncrypted: true, // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ
            ));
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
            if (image.imagePath != newEncryptedPath) {
              oldImagePaths.add(image.imagePath);
            }
          } else {
            print('NoteStorage: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${image.id}');
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
            processedImages.add(image);
          }
        } else {
          print('NoteStorage: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${image.imagePath}');
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
          processedImages.add(image);
        }
      }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    final updatedNote = note.copyWith(
      content: updatedContent,
      encryptedContent: encryptedContent,
      modifiedAt: DateTime.now(),
      images: processedImages,
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É
    await _saveNote(updatedNote);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    for (final oldPath in oldImagePaths) {
      try {
        final oldFile = File(oldPath);
        if (await oldFile.exists()) {
          await oldFile.delete();
          print('NoteStorage: üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $oldPath');
        }
      } catch (e) {
        print('NoteStorage: ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ $oldPath: $e');
      }
    }
    
    return (updatedNote, encryptedNoteKey);
  }
  
  /// –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
  Future<void> deleteNote(String id) async {
    final notesDir = await _getNotesDirectory();
    final file = File('${notesDir.path}/$id.json');
    
    if (await file.exists()) {
      await file.delete();
    }
  }
  
  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ —Ñ–∞–π–ª
  Future<void> _saveNote(Note note) async {
    final notesDir = await _getNotesDirectory();
    final file = File('${notesDir.path}/${note.id}.json');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ JSON
    final imagesJson = note.images.map((img) => img.toJson()).toList();
    
    final noteJson = jsonEncode({
      'id': note.id,
      // 'content': note.content, // –£–î–ê–õ–ï–ù–û: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
      'createdAt': note.createdAt.toIso8601String(),
      'modifiedAt': note.modifiedAt?.toIso8601String(),
      'encryptedContent': note.encryptedContent,
      'images': imagesJson,
    });
    
    await file.writeAsString(noteJson);
  }
  
  /// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
  String _generateNoteKey() {
    final random = Random.secure();
    final bytes = List<int>.generate(32, (i) => random.nextInt(256));
    return base64Encode(bytes);
  }
  
  /// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
  String _generateId() {
    final random = Random.secure();
    final bytes = List<int>.generate(16, (i) => random.nextInt(256));
    return base64Encode(bytes).replaceAll(RegExp(r'[^a-zA-Z0-9]'), '');
  }
  
  /// –®–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
  String _encryptContent(String content, String key) {
    final keyBytes = utf8.encode(key);
    final keyHash = sha256.convert(keyBytes);
    final encryptionKey = Key.fromUtf8(keyHash.toString().substring(0, 32));
    final iv = IV.fromLength(16);
    final encrypter = Encrypter(AES(encryptionKey));
    
    final encrypted = encrypter.encrypt(content, iv: iv);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º IV –≤–º–µ—Å—Ç–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: base64(iv) + ":" + base64(data)
    return '${base64Encode(iv.bytes)}:${encrypted.base64}';
  }
  
  /// –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
  String? _decryptContent(String encryptedContent, String key) {
    try {
      final keyBytes = utf8.encode(key);
      final keyHash = sha256.convert(keyBytes);
      final encryptionKey = Key.fromUtf8(keyHash.toString().substring(0, 32));
      final encrypter = Encrypter(AES(encryptionKey));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
      if (encryptedContent.contains(':')) {
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: base64(iv):base64(data)
        final parts = encryptedContent.split(':');
        if (parts.length != 2) {
          return null;
        }
        
        final ivBytes = base64Decode(parts[0]);
        final encryptedBytes = base64Decode(parts[1]);
        
        final iv = IV(ivBytes);
        final encrypted = Encrypted(encryptedBytes);
        
        return encrypter.decrypt(encrypted, iv: iv);
      } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ base64(data) - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        return null;
      }
    } catch (e) {
      return null;
    }
  }
  
  /// –®–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∑–∞–º–µ—Ç–∫–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º
  String _encryptNoteKey(String noteKey, String masterKey) {
    final masterKeyBytes = utf8.encode(masterKey);
    final masterKeyHash = sha256.convert(masterKeyBytes);
    final encryptionKey = Key.fromUtf8(masterKeyHash.toString().substring(0, 32));
    final iv = IV.fromLength(16);
    final encrypter = Encrypter(AES(encryptionKey));
    
    final encrypted = encrypter.encrypt(noteKey, iv: iv);
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º IV –≤–º–µ—Å—Ç–µ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: base64(iv) + ":" + base64(data)
    return '${base64Encode(iv.bytes)}:${encrypted.base64}';
  }
  
  /// –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –∑–∞–º–µ—Ç–∫–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º
  String? _decryptNoteKey(String encryptedNoteKey, String masterKey) {
    try {
      final masterKeyBytes = utf8.encode(masterKey);
      final masterKeyHash = sha256.convert(masterKeyBytes);
      final encryptionKey = Key.fromUtf8(masterKeyHash.toString().substring(0, 32));
      final encrypter = Encrypter(AES(encryptionKey));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
      if (encryptedNoteKey.contains(':')) {
        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: base64(iv):base64(data)
        final parts = encryptedNoteKey.split(':');
        if (parts.length != 2) {
          return null;
        }
        
        final ivBytes = base64Decode(parts[0]);
        final encryptedBytes = base64Decode(parts[1]);
        
        final iv = IV(ivBytes);
        final encrypted = Encrypted(encryptedBytes);
        
        return encrypter.decrypt(encrypted, iv: iv);
      } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ç–æ–ª—å–∫–æ base64(data) - –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        return null;
      }
    } catch (e) {
      return null;
    }
  }
} 